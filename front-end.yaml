AWSTemplateFormatVersion: 2010-09-09
Description: "Tournament Brackets Front End"
Parameters:
  AppName:
    Type: String
    Default: "TournamentBrackets"
    Description: "TournamentBrackets"
  RepositoryBranch:
    Type: String
    Default: master
  TagValue:
    Type: String
    Default: TournamentBrackets
  BucketPrefix:
    Type: String
    Default: tournament-brackets
  PipelinePrefix:
    Type: String
    Default: TournamentBracketsPipeline

Resources:
  TournamentBracketsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${BucketPrefix}-${AWS::AccountId}'
      # Technically we don't need the S3 bucket configured
      # as a website, but I included it for the sake of completion.
      WebsiteConfiguration:
        IndexDocument: index.html
  Distribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          # Use the TournamentBracketsBucket as the CDN originÂ 
          - DomainName: !GetAtt TournamentBracketsBucket.DomainName
            Id: BucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultRootObject: index.html
        Enabled: true
        # Configure the caching behavior for our CDN
        DefaultCacheBehavior:
          MinTTL: 86400  # 1 day
          MaxTTL: 31536000  # 1 year
          ForwardedValues:
            QueryString: true
            Headers:
              - "Content-Type"
              - "Access-Control-Allow-Origin"
          TargetOriginId: BucketOrigin
          ViewerProtocolPolicy: "redirect-to-https"   # we want to force HTTPS
      Tags:
        - Key: Name
          Value: !Ref AppName
  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        # The downloaded source code for the build will come from CodePipeline
        Type: "CODEPIPELINE"
        Name: !Ref TagValue
      Environment:
        # Linux container with node installed
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/nodejs:8.11.0"
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.1
          phases:
            pre_build:
              commands:
                - echo Installing source NPM dependencies...
                - npm install
            build:
              commands:
                - echo Build started on `date`
                - npm run build
            post_build:
              commands:
                # copy the contents of /build to S3
                - aws s3 cp --recursive --acl public-read ./build s3://${TournamentBracketsBucket}/
                # set the cache-control headers for service-worker.js to prevent
                # browser caching
                - aws s3 cp --acl public-read
                  --cache-control="max-age=0, no-cache, no-store, must-revalidate"
                  ./build/service-worker.js s3://${TournamentBracketsBucket}/
                # set the cache-control headers for index.html to prevent
                # browser caching
                - aws s3 cp --acl public-read
                  --cache-control="max-age=0, no-cache, no-store, must-revalidate"
                  ./build/index.html s3://${TournamentBracketsBucket}/
                # invalidate the CloudFront cache for index.html and service-worker.js
                # to force CloudFront to update its edge locations with the new versions
                - >
                  aws cloudfront create-invalidation --distribution-id ${Distribution}
                  --paths /index.html /service-worker.js
          artifacts:
            files:
              - '**/*'
            base-directory: build
  # IAM Role that allows CodeBuild to interact with S3, CloudWatch, and CloudFront
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/service-role/"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt PipelineBucket.Arn
                  - !Join ['', [!GetAtt PipelineBucket.Arn, "/*"]]
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - !GetAtt TournamentBracketsBucket.Arn
                  - !Join ['', [!GetAtt TournamentBracketsBucket.Arn, "/*"]]
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "cloudfront:CreateInvalidation"
                Resource:
                  - "*"
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt CodePipeLineRole.Arn
      Name: !Sub "${PipelinePrefix}-${AWS::AccountId}"
      ArtifactStore:
        Location: !Ref PipelineBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !Ref AppName
                BranchName: !Ref RepositoryBranch
              OutputArtifacts:
                - Name: TournamentBracketsSource
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: TournamentBracketsSource
              OutputArtifacts:
                - Name: TournamentBracketsAppBuild
  CodePipeLineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt PipelineBucket.Arn
                  - !Join ['', [!GetAtt PipelineBucket.Arn, "/*"]]
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:UploadArchive"
                  - "codecommit:GetUploadArchiveStatus"
                Resource:
                  - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${AppName}'
                  - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${AppName}/*'
  # Temp bucket for storing build artifacts
  PipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${BucketPrefix}-pipeline-${AWS::AccountId}"
